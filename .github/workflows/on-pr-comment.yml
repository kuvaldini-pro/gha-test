name: on_pr_comment

on:
  push:
  pull_request:
  issue_comment:
    types: [created, edited]

jobs:
  job_comment_on_pr:
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ github.event.comment &&
          github.event.issue.pull_request &&
          startsWith(github.event.comment.body, '/buildme') }}
    ## use as needs.job_comment_on_pr.outputs.triggered
    if: ${{ github.event.comment &&
          github.event.issue.pull_request &&
          startsWith(github.event.comment.body, '/buildme') }}
    steps:
      -
        name: Show context
        run: |
          cat <<'END'
            ${{ toJson(github) }}
          END
      - 
        name: GITHUB_ENV
        run: |
          echo COMMENT_ON_PULL_REQUEST=true                  >>$GITHUB_ENV
          curl ${{github.event.issue.pull_request.url}} |
            jq -r '"REF="+.head.ref, "SHA="+ .head.sha'      >>$GITHUB_ENV

          env
      - 
        name: Reaction
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"rocket"}' \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}"

  build:
    runs-on: ubuntu-latest
    needs: job_comment_on_pr
    if: ${{ success() || needs.job_comment_on_pr.result == 'skipped' }}
    steps:
      - name: steps.triggered_by_pr_comment.outputs.skipped
        id: triggered_by_pr_comment
        run: |
          echo ::set-output name=skipped::${{needs.job_comment_on_pr.result == 'skipped'}}
          echo  >>$GITHUB_ENV     SKIPPED=${{needs.job_comment_on_pr.result == 'skipped'}}
          env
      -
        name: Show context
        run: |
          cat <<'END'
            ${{ toJson(github) }}
          END
      -
        name: Show needs
        run: |
          cat <<'END'
            ${{ toJson(needs) }}
          END
      - 
        run: echo "HELLO"
